// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OluRankings.Data;

#nullable disable

namespace OluRankings.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251006111700_Update_App_20251006")]
    partial class Update_App_20251006
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("OluRankings.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("OluRankings.Models.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Club")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadshotUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HeightCm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeightKg")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("FamilyName", "GivenName");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("OluRankings.Models.AthleteSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AthleteId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Club")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("TEXT");

                    b.Property<long>("EvidenceBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EvidenceContentType")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("EvidencePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewerNote")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("Status");

                    b.ToTable("AthleteSubmissions");
                });

            modelBuilder.Entity("OluRankings.Models.Ranking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Publisher", "Sport", "AgeGroup", "Position", "Region", "Period")
                        .IsUnique();

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("OluRankings.Models.RankingEntry", b =>
                {
                    b.Property<Guid>("RankingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("RankingId", "AthleteId");

                    b.HasIndex("AthleteId");

                    b.ToTable("RankingEntries");
                });

            modelBuilder.Entity("OluRankings.Models.StatLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AssistsPerGame")
                        .HasColumnType("REAL");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Competition")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EvidenceUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PointsPerGame")
                        .HasColumnType("REAL");

                    b.Property<double>("ReboundsPerGame")
                        .HasColumnType("REAL");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("StatLines");
                });

            modelBuilder.Entity("OluRankings.Models.ApplicationUser", b =>
                {
                    b.HasOne("OluRankings.Models.ApplicationUser", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("OluRankings.Models.Athlete", b =>
                {
                    b.HasOne("OluRankings.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OluRankings.Models.AthleteSubmission", b =>
                {
                    b.HasOne("OluRankings.Models.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId");

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("OluRankings.Models.RankingEntry", b =>
                {
                    b.HasOne("OluRankings.Models.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OluRankings.Models.Ranking", "Ranking")
                        .WithMany("Entries")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("OluRankings.Models.StatLine", b =>
                {
                    b.HasOne("OluRankings.Models.Athlete", "Athlete")
                        .WithMany("StatLines")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("OluRankings.Models.Athlete", b =>
                {
                    b.Navigation("StatLines");
                });

            modelBuilder.Entity("OluRankings.Models.Ranking", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
